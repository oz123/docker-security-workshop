# -*- mode: ruby -*-
# vi: set ft=ruby :

$script = <<SCRIPT
export DOCKER_VERSION=18.06
export DEBIAN_FRONTEND="noninteractive"
export TRANSPORT_PACKAGES="apt-transport-https ca-certificates software-properties-common"
export DEBUG_PACKAGES="jq dnsutils tcpdump curl netcat openssl nmap iputils-ping traceroute busybox apparmor-utils"

echo "console-setup  console-setup/charmap47 select  UTF-8" > encoding.conf
debconf-set-selections encoding.conf
rm encoding.conf

apt-get -y update && apt-get --fix-broken install python3-apt python-apt-common
apt-get -y -o "Dpkg::Options::=--force-confdef" -o "Dpkg::Options::=--force-confold" upgrade && apt-get -y autoclean

# enforce docker version
function get_docker() {
    dpkg -l software-properties-common | grep ^ii || sudo apt install ${TRANSPORT_PACKAGES} -y
    curl --retry 10 -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    add-apt-repository -u "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt-get -y install docker-ce="${DOCKER_VERSION}"'*' socat conntrack ipset
    cat <<EOF > /etc/apt/preferences.d/docker
Package: docker-ce
Pin: version ${DOCKER_VERSION}.*
Pin-Priority: 1000
EOF
}

# Install debugging tools
function get_tools() {
    apt-get install -y \
        -o "Dpkg::Options::=--force-confdef" \
        -o "Dpkg::Options::=--force-confold" \
        ${DEBUG_PACKAGES}
}


function get_undocker() {
    apt install -y python3-pip
    pip3 install git+https://github.com/larsks/undocker
}


function prepare_bocker() {
    fallocate -l 10G ~/btrfs.img
    mkdir /var/bocker
    mkfs.btrfs ~/btrfs.img
    mount -o loop ~/btrfs.img /var/bocker
    docker pull centos
    docker save centos | undocker -o base-image
    ln -s /vagrant/bocker /usr/bin/bocker
    echo 1 > /proc/sys/net/ipv4/ip_forward
    iptables --flush
    iptables -t nat -A POSTROUTING -o bridge0 -j MASQUERADE
    iptables -t nat -A POSTROUTING -o enp0s3 -j MASQUERADE
    ip link add bridge0 type bridge
    ip addr add 10.0.0.1/24 dev bridge0
    ip link set bridge0 up
}

function get_go112() {
    add-apt-repository ppa:longsleep/golang-backports
    apt-get update
    apt-get install -y golang-1.12-go
    echo "export PATH=\\$PATH:/usr/lib/go-1.12/bin/" >> /home/vagrant/.bashrc
}

function get_dive() {
    wget -q https://github.com/wagoodman/dive/releases/download/v0.9.1/dive_0.9.1_linux_amd64.deb
    dpkg -i dive_0.9.1_linux_amd64.deb
}

get_docker
get_tools
get_undocker
get_go112
get_dive
# prepare_bocker
SCRIPT

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: $script
  config.vm.synced_folder ".", "/home/vagrant/go/src", owner: "vagrant",
  group: "vagrant", mount_options: ["uid=1000", "gid=1000"]

end
